"""
Django settings for sae project.
Generated by 'django-admin startproject' using Django 2.1.1.
For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
with open( os.path.join( BASE_DIR, '../secret_key.txt' ) ) as f:
	SECRET_KEY = f.read().strip()

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False

# after https 443 is ready
# SECURE_SSL_REDIRECT = True
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SECURE_HSTS_SECONDS = 5
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

# SECURE_CONTENT_TYPE_NOSNIFF = True
# SECURE_BROWSER_XSS_FILTER = True
# X_FRAME_OPTIONS = 'DENY' # 'SAMEORIGIN'

ALLOWED_HOSTS = [
	'pyvision.applinzi.com',
	'mutualact.top',
	'www.mutualact.top',
	'127.0.0.1',
	'localhost',
]

# Application definition
INSTALLED_APPS = [
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django.contrib.admin',
	'sae.home',
	'sae.register',
	'sae.index',
	'sae.basic',
	'django.contrib.auth',
	# 'sae.sae01',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'django.middleware.locale.LocaleMiddleware', # for internationalization
	'sae.basic.middleware.CrontabMiddleware',
]

ROOT_URLCONF = 'sae.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [
			os.path.join( BASE_DIR, 'sae/template/' ),
		],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
				'django.template.context_processors.media',
			],
		},
	},
]

WSGI_APPLICATION = 'sae.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
if os.environ.get('MYSQL_PORT') is not None and '' != os.environ.get('MYSQL_PORT'):
	# production environment
	mysql_options = {
		'database': os.environ.get('MYSQL_DB_SHARE'),
		'user': os.environ.get('MYSQL_USER_SHARE'),
		'password': os.environ.get('MYSQL_PASS_SHARE'),
		'host': os.environ.get('MYSQL_HOST'),
		'port': int(os.environ.get('MYSQL_PORT')),
		'isolation_level': 'read committed',
		'init_command': 'SET default_storage_engine=INNODB',
		'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
		# os.environ.get('MYSQL_HOST_S'), # Slave Database Domain Name (Read Only)
	}
elif os.path.isfile( os.path.join( BASE_DIR, '../mysql_peter.cnf' ) ):
	# localhost
	mysql_options = {
		'read_default_file': os.path.join( BASE_DIR, '../mysql_peter.cnf' ),
		'init_command': 'SET default_storage_engine=INNODB',
		'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
	}
else:
	mysql_options = {}
DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.mysql',
		'OPTIONS': mysql_options,
	},
	'sqlite': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	},
	'mysql': {
		'ENGINE': 'django.db.backends.mysql',
		'OPTIONS': mysql_options,
	},
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join( BASE_DIR, 'sae/static/' )

STATICFILES_FINDERS = [
	'django.contrib.staticfiles.finders.FileSystemFinder',
	'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
	("css", os.path.join( BASE_DIR, 'sae/register/static/css/' ) ),
	("js", os.path.join( BASE_DIR, 'sae/register/static/js/' ) ),
	("fonts", os.path.join( BASE_DIR, 'sae/register/static/fonts/' ) ),
	("images", os.path.join( BASE_DIR, 'sae/register/static/images/' ) ),
	("css", os.path.join( BASE_DIR, 'sae/home/static/css/' ) ),
]

MEDIA_ROOT = os.path.join( BASE_DIR, 'sae/media/' )
MEDIA_URL = '/uploads/'

##################
# AUTHENTICATION #
##################
# After using a custom user model when starting a project, You need the following line
# https://docs.djangoproject.com/en/2.1/topics/auth/customizing/
AUTH_USER_MODEL = 'basic.User'
# AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
LOGIN_REDIRECT_URL='/home/'
LOGOUT_REDIRECT_URL = '/' # go to index page after logout
LOGIN_URL = '/login/'
# django.conf.global_settings.py
# LOGIN_URL = '/accounts/login/'
# LOGIN_REDIRECT_URL = '/accounts/profile/'

##################
# Paginator #
##################
PER_PAGE = 10
ORPHANS = 0
ALLOW_EMPTY_FIRST_PAGE = True

##################
# Message List Body Length #
##################
MESSAGE_BODY_LENGTH = 50

##################
# SinaSCS Settings #
##################
with open( os.path.join( BASE_DIR, '../sina_scs_access_key.txt' ) ) as f:
	SINA_SCS_ACCESS_KEY = f.read().strip()
with open( os.path.join( BASE_DIR, '../sina_scs_secret_key.txt' ) ) as f:
	SINA_SCS_SECRET_KEY = f.read().strip()
with open( os.path.join( BASE_DIR, '../sina_scs_bucket_name.txt' ) ) as f:
	SINA_SCS_BUCKET_NAME = f.read().strip()

##################
# INTERNATIONALIZATION #
##################
LOCALE_PATHS = [
	# 'D:\\projects\\python\\sae\\sae\\common_files\\locale',
	os.path.join( BASE_DIR, 'sae/common_files/locale/' ),
]

###########
# LOGGING #
###########
get_dict = lambda file_name : {
	'level': 'DEBUG',
	'class': 'logging.handlers.RotatingFileHandler',
	'formatter': 'verbose',
	'filename': os.path.join( BASE_DIR, 'sae/temporary/' ) + datetime.datetime.now().strftime('%Y%m%d')+ file_name + '.log',
	'maxBytes': 2097152,
	'backupCount': 1000,
	'encoding': 'utf-8',
}
debug_server_file = get_dict("debug_server",)
debug_server_file.update({'filters': ['require_debug_true'],})
LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'verbose': {
			'format': '[ {levelname} ] {asctime} {module} {process:d} {thread:d} {message}',
			'datefmt': '%Y-%m-%d %H:%M:%S',
			'style': '{',
		},
		'simple': {
			'format': '[ {levelname} ] {asctime} {message}',
			'datefmt': '%Y-%m-%d %H:%M:%S',
			'style': '{',
		},
	},
	'filters': {
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue',
		},
	},
	'handlers': {
		'console': {
			'level': 'INFO',
			'class': 'logging.StreamHandler',
			'formatter': 'simple'
		},
		'mail_admins': {
			'level': 'ERROR',
			'class': 'django.utils.log.AdminEmailHandler',
		},
		'rotating_file': get_dict('rotating'),
		'request_file': get_dict('request'),
		'debug_server_file':debug_server_file,
		'template_file':get_dict('template'),
		'db_file':get_dict('db'),
		'security_file':get_dict('security'),
	},
	'loggers': {
		'django': {
			'handlers': ['rotating_file', 'console'],
			'level': 'INFO',
			'propagate': True,
		},
		'django.request': {
			'handlers': ['request_file', 'console'],
			'level': 'DEBUG',
			'propagate': False,
		},
		'django.server':{
			'handlers': ['debug_server_file', 'console'],
			'level': 'DEBUG',
			'propagate': False,
		},
		'django.template':{
			'handlers': ['template_file', 'console'],
			'level': 'DEBUG',
			'propagate': False,
		},
		'django.db.backends':{
			'handlers': ['db_file', 'console'],
			'level': 'DEBUG',
			'propagate': False,
		},
		'django.security.SuspiciousOperation':{
			'handlers': ['mail_admins', 'security_file', 'console'],
			'level': 'INFO',
			'propagate': False,
		},
		'django.security.DisallowedHost':{
			'handlers': ['mail_admins', 'security_file', 'console'],
			'level': 'INFO',
			'propagate': False,
		},
		'django.security.csrf':{
			'handlers': ['mail_admins', 'security_file', 'console'],
			'level': 'INFO',
			'propagate': False,
		},
	}
}

# done 1 to do log rotate in settings.py file!
# done 2 to do login after registration
# done 3 to deploy to the Sina by using MySql
# done 4 enable https
# 5 enable zh-hanz
# done 6 send a welcome message after registration
# done 7 if full name is in Chinese, last name goes first
# done 8 when visiting home_detail.html from index_index.html, the back arrow goes wrong
# 9 a delete button should be included in the image detail page
# done 10 separate the settings page and homeindex page!
# done 11 fix the upload button for good looking and internationalization
# 12 the home.settings page should inlcude a function to update first_name, last_name, email, phone, and so on.
# done It is already inside the Django.request log; by now just let it be so:
# done 13 print the request in sae01_db.html to see if it contains mutualact.top or pyvision.applinzi.com
# done 14 404.html cannot find page_title
# done 15 Log request.user.pk sometimes is None. Need to change to request.user
# 16 Set the <img href="uri" /> and write a backend uri for outputing base64 for each image
# done 17 check all routes for compliance of REST API
